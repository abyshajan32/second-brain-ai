💡 Optimized Prompt for Building "SecondBrain AI" App I want to build a minimalistic, dark-themed productivity app called SecondBrain AI, which serves as my personal assistant and to-do planner. The app has two main tabs on the dashboard and will be connected with OpenRouter API (for AI summarization and conversation) and PostgreSQL (for data storage).  🔹 GENERAL UI/UX REQUIREMENTS: Dark Mode UI  Color Palette:  Background: #1F1F1F  Text: #F1F1F1  Buttons/Accent: #4CAF50 or #00BCD4  Highlights: #FF4081 or #FFD54F  Font: Use Inter or Roboto  Animation: Smooth fade in/out transitions for buttons, inputs, and tabs  Mobile and desktop responsive  TAB 1: 🧠 Personal Assistant (Journal Interface) UI Layout: Top bar: Shows current Date | Week | Year  Input fields:  Heading input (text)  Body input (multi-line text area like a journal/notepad)  Optional: Tags input (comma-separated or selectable)  Optional: Voice Input button to convert speech to text (if supported)  “Save” Button:  When clicked:  Triggers OpenRouter API call to generate a summary  Stores:  Full journal entry  Tags  AI-generated summary  Timestamp  All stored in PostgreSQL  AI Chat Interface: Chat field where I can ask:  “What happened on [date]?”  “Summarize my week.”  “What did I do yesterday?”  AI pulls summaries from PostgreSQL and responds via OpenRouter API  TAB 2: ✅ To-Do Tasks UI Layout: Date Picker (set specific day/week/year)  Heading (title of task)  Task Description (multi-line)  Optional Fields:  Priority dropdown: High, Medium, Low  Status toggle: Complete / Incomplete  “Save” button stores everything into PostgreSQL  AI Features (Optional): "What’s pending today?" — AI filters today’s incomplete tasks  “Generate weekly plan” — AI uses past task patterns to auto-suggest next week’s tasks  BACKEND / FUNCTIONAL REQUIREMENTS: OpenRouter API Integration:  Call OpenRouter AI to summarize journal entries  Answer queries from chat tab using stored summaries  PostgreSQL Integration:  Two tables: journal_entries and todo_tasks  Journal table stores: id, heading, body, date, week, year, tags, ai_summary  Tasks table stores: id, heading, description, date, priority, status  Frontend Tools:  Built with FlutterFlow, Framer, Deepsite, Bolt.new, or Lovable  Responsive for mobile and web  Smooth Navigation:  2 clearly visible tabs on a sidebar or top-nav layout  Animations for tab switch and save confirmation  📌 GOAL: A sleek, fast, AI-powered second brain app with journaling, memory retrieval, task planning, and a chatbot assistant—all in a dark minimal UI.
clear the mockdata
clear tthe voice input feature from journal entry
add a tab on the left side under the to do tasks that 🔐 User DB Connection Setup Allow users to connect their own self-hosted PostgreSQL instance:  Required Inputs: Host Port Database Name Username Password SSL Mode (optional)
clear the entire database tab a